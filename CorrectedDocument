<!DOCTYPE html>
<html lang="en-us">
  <head>
    <meta charset="utf-8">

    <title>Number guessing game</title>

    <style>
      html {
        font-family: sans-serif;
      }
      body {
        width: 50%;
        max-width: 800px;
        min-width: 480px;
        margin: 0 auto;
      }
      .lastResult {
        color: white;
        padding: 3px;
      }
    </style>
  </head>

  <body>
      <h1>Number guessing game</h1>

      <p>We have selected a random number between 1 and 100. See if you can guess it in 10 turns or less. We'll tell you if your guess was too high or too low.</p>

<div class="form">
  <label for="guessField">Enter a guess: </label>
  <input type="text" id="guessField" class="guessField">
  <input type="submit" value="Submit guess" class="guessSubmit">
</div>

<div class="resultParas">
  <p class="guesses"></p>
  <p class="lastResult"></p>
  <p class="lowOrHi"></p>
</div>

</body>

<script>
  let randomNumber = Math.floor(Math.random()) + 1;

  const guesses = document.querySelector('.guesses');
  const lastResult = document.querySelector('.lastResult');
  const lowOrHi = document.querySelector('.lowOrHi');
  const guessSubmit = document.querySelector('.guessSubmit');
  const guessField = document.querySelector('.guessField');

  let guessCount = 1;
  let resetButton;

  function checkGuess() {

    const userGuess = Number(guessField.value);
    if(guessCount === 1) {
      guesses.textContent = 'Previous guesses: ';
    }
    guesses.textContent += userGuess + ' ';

    if(userGuess === randomNumber) {
      lastResult.textContent = 'Congratulations! You got it right!';
      lastResult.style.backgroundColor = 'green';
      lowOrHi.textContent = '';
      setGameOver();
    } else if(guessCount === 10) {
      lastResult.textContent = '!!!GAME OVER!!!';
      setGameOver();
    } else {
      lastResult.textContent = 'Wrong!';
      lastResult.style.backgroundColor = 'red';
      if(userGuess < randomNumber) {
        lowOrHi.textContent = 'Last guess was too low!';
      } else if(userGuess > randomNumber) {
        lowOrHi.textContent = 'Last guess was too high!';
      }
    }

    guessCount++;
    guessField.value = '';
    guessField.focus();
  }
  guessSubmit.addEventListener('click', checkGuess);

  function setGameOver() {
	  guessField.disabled = true;
	  guessSubmit.disabled = true;
	  resetButton = document.createElement('button');
	  resetButton.textContent = 'Start new game';
	  document.body.appendChild(resetButton);
	  resetButton.addeventListener('click', resetGame);
  }

  function resetGame() {
	  guessCount = 1;

    const resetParas = document.querySelectorAll('.resultParas p');
    for (const resetPara of resetParas) {
      resetPara.textContent = '';
    }
	  resetButton.parentNode.removeChild(resetButton);

	  guessField.disabled = false;
	  guessSubmit.disabled = false;
	  guessField.value = '';
	  guessField.focus();

	  lastResult.style.backgroundColor = 'white';

	  randomNumber = Math.floor(Math.random()) + 1;
  }
</script>
</html>

//ERROR 1
//The first line of the error message is " Uncaught TypeError: guessSubmit.addEventListener is not a function numberGame.html:86:15 "
//The first part, " Uncaugth TyperError; guessSubmit.addeventListener is not a function ", is telling us something about what went wrong
//The second Part, " numberGame.html:86:15 ", is telling us where in the code the error came from: line 86, character 15 of the file "numberGame.html"
//The error message is telling us that the function we're calling is not recognized by the JavaScript interpreter. Often, this error message actually means we've spelled something wrong. If you are eevr unsure of teh correct spelling of something, look it up using MDN.
//So, based off the error message and the function's name we are calling, it is safe to say we spelled the funnction incorrectly!

//ERROR 2
//After saving the page and refreshing, no more errors were displaying
//Now if we try and enter a number and press Submit, a new error occurs
//The new error in Firefox is " Uncaught TypeError: can't access property "textContent", lowOrHi is null
//The new error in Chrome is " Uncaught TypeError: Cannot set properties of null (setting 'textContext')
//It is the same error, but different browsers display them in different ways
//NOTE: This error didn't come up as soon as the page was loaded because this error occurred inside a function (inside the checkGuess() {} block). Code inside functions runs in a separate scope than code outside functions. In this case, the code was not run and the error was not thrown until the checkGuess() function was run by line 86.
//The line number given in the error is 80. Have a look at line 80, and you'll see the following code: " lowOrHi.textContext = "Last guess was too high!"; "
//This line is trying to se the textContext property of the lowOrHi variable to a text string, but it's not working because lowOrHi does not contain what it's supposed to. Let's see why this is- try searching for other instances of lowOrHi in the code. The earliest instance you'll find is on line 49: " const lowOrHi = document.querySelector("lowOrHi");
//At this point we are trying to make the variable contain a reference to an element in the document's HTML. Let's see what the variable contains after this line has been run. Add teh folowing code on line 50: "console.log(lowOrHi);
//This code will print the value of lowOrHi to the console after we tried to set it in line 49. Save & refresh!
//Sure enough, the value of lowOrHi returns " null ". The value null menas "nothing", or "no value'. So our code to set lowOrHi to an element is going wrong.
//Line 49 is using document.querySelector() method to get a reference to an element by selecting it with a CSS selector. Looking further up our file, we can find the paragraph in question: "<p class="lowOrHi"></p>
//So we need a class selector here, which begins with a dot (.), but the selector being passed into the querySelector() method in line 49 has no dot. This could be the problem! Try changing lowOrHi to .lowOrHi in line 49.
//After refreshing we can see the console.log(lowOrHi) now returns the value of the <p> element we want!

//ERROR 3
//Now if you play the game through again, you should have more success - the game should play through just fine, until you end the game, either by guessing the right number or by running out of guesses.
//At this point, the game fails again, and the same error is spat out that we got at the beginning - "TypeError: resetButton.addeventListener is not a function" This time it is coming from line 94 - looking at liune 94, we know we just need to change the function to addEventListener instead.

//ERROR 4
//At this point, the game should be running like normal, however after playing a few times, you'll notice that the game always chooses 1 as the "random" number- that's not how we want the game to work
//This means that there is a logic error somewhere - the game is playing and not returning erros, but it's not playing correctly.
//Search the randomNumber variable, and the lines where the random number is first set. The instance that stores the random number is first set. The instance that stores the random number that we want to guess at the start of the game should be around line 45.
//It'll read: let randomNumber = Math.floor(Math.random()) + 1;
//and the one that generates the random number before each subsequent game is around line 113
//randomNumber = Math.floor(Math.raondom()) + 1;
//To check whether these lines are indeed the problem, let's turn to our friend console.log() again - insert the following line directly below each of the above two lines: console.log(randomNumber);
//Save & Refresh, then play a few games - you'll see that randomNumber is equal to 1 at each point where it is logged to the console.
//Working through the logic
//To fix this, let's consider how the line is working. First, we invoke Math.random, which generates a random deciaml number between 0 and 1, ex: 0.5675493843
//Next, we pass the result of invoking Math.random() through Math.floor(), which rounds the number passed to it down to the nearest whole number. We then add 1 to the result: Math.floor(Math.random()) + 1;
//Rounding a random decimal number between 0 and 1 will always return 0, so adding 1 to it will always return 1. We need to multiply the random number by 100 before we round it down. The following would give us a random number between 0 and 99: Math.floor(Math.random() * 100);
//Hence us wanting to add 1, to give us a random number between 1 and 100: Math.floor(Math.random() * 100) + 1;
//Update both lines, then save & refresh

//Yay! The game is working as expected & choosing random numbers!!
